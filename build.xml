<project name="texton" basedir="." default="war" xmlns:ivy="antlib:org.apache.ivy.ant">
    <!--
      Tools
      Build file for the project tools
      Part of DK-CLARIN

      Author: Bart Jongejan

  -->
    <property environment="env"/>
    <!-- Define Ivy stuff -->
    <property name="ivy.install.version" value="2.0.0" />
    <property name="ivy.jar.dir" value="${basedir}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="central.repo" value="http://repo1.maven.org/maven2" />
    <property name="jboss.repo" value="http://repository.jboss.org/maven2" />


    <!-- Define folder names -->
    <property name="lib.dir"     value="lib"/>
    <!-- Assume that the 'Bracmat' project is in the same folder as the 'DK-ClarinTools' project
         (Clone Bracmat from https://github.com/BartJongejan/Bracmat)
    -->
    <property name="cstdklib.dir"     value="..\prog\bracmat\java-JNI\java"/>
    <property name="src.dir"     value="src"/>
    <property name="class.dir"   value="classes"/>
    <property name="javadoc.dir" value="javadoc"/>
    <property name="jar.dir"     value="jar"/>
    <property name="war.dir"     value="war"/>
    <property name="web.dir"     value="web-source"/>
    <property name="conf.dir"    value="conf"/>

    <!-- Set Classpath equal to what is needed -->
    <path id="classpath">
        <fileset dir="${lib.dir}"  includes="**/*.jar"/>
        <fileset dir="${cstdklib.dir}"  includes="*.jar"/>
        <fileset dir="${conf.dir}"  includes="**/*.jar"/>
    </path>

    <!-- Delete everything autogenerated -->
    <target name="clean" description="Clean the project">
        <delete dir="${class.dir}"/>
        <delete dir="${war.dir}" />
        <delete dir="${jar.dir}"/>
        <delete dir="${javadoc.dir}" />
    </target>

    <!-- Delete everything autogenerated, including downloaded libs and ivy.xml -->
    <target name="clean-all" depends="clean" description="Delete everything autogenerated, including downloaded libs">
        <delete file="ivy.xml" />
        <delete dir="${lib.dir}" />
        <delete dir="${ivy.jar.dir}" />
    </target>

    <target name="download-ivy" if="ivy">
        <mkdir dir="${ivy.jar.dir}" />
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <echo message="installing ivy..." />
        <get src="${central.repo}/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
    </target>

    <!-- Install Ivy. Only run on first compile -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar" />
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
        <ivy:settings file="${conf.dir}/ivy.settings.xml" />
    </target>

    <target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
        <ivy:retrieve />
    </target>

    <!-- if -Dprod=true is used, copy the production conf file to conf dir -->
    <target name="is-prod" if="prod">
        <copy overwrite="true" file="properties_prod.xml" tofile="${conf.dir}/properties.xml"/>
        <copy overwrite="true" file="ivy_jboss.xml" tofile="ivy.xml"/>
        <delete file="lib/slf4j-log4j12-1.5.8.jar"/>
        <delete file="lib/slf4j-api-1.5.8.jar"/>
    </target>

    <target name="is-dev" if="dev">
        <copy overwrite="true" file="properties_dev.xml" tofile="${conf.dir}/properties.xml"/>
        <copy overwrite="true" file="ivy_jboss.xml" tofile="ivy.xml"/>
        <delete file="${ivy.jar.dir}/slf4j-log4j12-1.5.8.jar"/>
    </target>

    <target name="is-tomcat" if="tomcat">
        <echo message="This is warning message." />
        <copy overwrite="true" file="properties_local.xml" tofile="${conf.dir}/properties.xml"/>
        <copy overwrite="true" file="ivy_tomcat.xml" tofile="ivy.xml"/>
        <copy overwrite="true" file="${env.CATALINA_HOME}/${lib.dir}/servlet-api.jar" tofile="${ivy.jar.dir}/servlet-api.jar"/>
        <delete file="${ivy.jar.dir}/slf4j-log4j12-1.5.8.jar"/>
    </target>

    <target name="is-tomcatD" if="tomcatD">
        <echo message="This is warning message." />
        <copy overwrite="true" file="properties_local-D.xml" tofile="${conf.dir}/properties.xml"/>
        <copy overwrite="true" file="ivy_tomcat.xml" tofile="ivy.xml"/>
        <copy overwrite="true" file="${env.CATALINA_HOME}/${lib.dir}/servlet-api.jar" tofile="${ivy.jar.dir}/servlet-api.jar"/>
        <delete file="${ivy.jar.dir}/slf4j-log4j12-1.5.8.jar"/>
    </target>

  <target name="is-tomcatU" if="tomcatU">
    <echo message="This is warning message." />
    <echo message="${env.CATALINA_HOME}" />
    <copy overwrite="true" file="properties_local_ubuntu.xml" tofile="${conf.dir}/properties.xml"/>
    <copy overwrite="true" file="ivy_tomcat.xml" tofile="ivy.xml"/>
    <copy overwrite="true" file="${CATALINA_HOME}/${lib.dir}/servlet-api.jar" tofile="${ivy.jar.dir}/servlet-api.jar"/>
    <delete file="${ivy.jar.dir}/slf4j-log4j12-1.5.8.jar"/>
  </target>

  <!-- Set the appropriate environment -->
    <target name="envir" depends="is-prod, is-dev, is-tomcat, is-tomcatD, is-tomcatU"/>

    <!--Compile the module, clean first  -->
    <target name="compile" depends="clean, resolve, envir" description="Compiles the whole bundle">
        <mkdir dir="${class.dir}"/>
        <javac  srcdir="${src.dir}" destdir="${class.dir}" classpathref="classpath" encoding="utf-8" debuglevel="lines,vars,source" debug="true" >
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <!--Make jar files  -->
    <target name="jar" depends="compile" description="Jar the project">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${class.dir}">
            <manifest>
                <!-- don't write anything in MANIFEST.MF -->
            </manifest>
        </jar>
    </target>

    <!-- Pack as war file -->
    <target name="war" depends="envir, jar" description="Pack to servlet war">
        <mkdir dir="${war.dir}"/>
        <war destfile="${war.dir}/${ant.project.name}.war" webxml="web.xml">
            <fileset dir="${web.dir}"/>
            <lib dir="${jar.dir}"/>
            <lib dir="${lib.dir}">
                <exclude name="**/servlet.jar"/>
                <exclude name="**/servlet-api.jar"/>
            </lib>
            <classes dir="${conf.dir}"/>
        </war>
    </target>

    <!-- Create javadocs -->
    <target name="javadoc" description="Create Javadocs">
        <mkdir dir="${javadoc.dir}" />
        <javadoc destdir="${javadoc.dir}">
            <fileset dir="${src.dir}/" includes="**/*.java" />
        </javadoc>
    </target>

</project>
